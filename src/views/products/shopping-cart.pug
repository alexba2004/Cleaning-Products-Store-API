extends ../layout/index

block styles
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css")

block content
  script.
    document.addEventListener("DOMContentLoaded", function () {
      updateTotal();
      showShoppingCart();

      document.getElementById("pay-now-btn").addEventListener("click", buyNow);
    });

  div.container.mx-auto.my-10.text-center
    h1.text-4xl.font-bold.mb-8 Carrito de compra

    p#total-purchase(class="text-lg font-bold mb-4") Total de compra: $

    button#pay-now-btn(class="bg-customBlue12 text-white p-3 mt-4 rounded mx-auto block") Pagar

    div#popup-container(class="hidden fixed inset-0 bg-black bg-opacity-50 h-screen w-screen flex items-center justify-center")
      div#popup-content(class="bg-customBulue14 p-8 rounded-lg w-2/3 h-2/3 max-w-screen-xl max-h-screen-xl relative")
        div(class="mx-auto w-64 h-64 overflow-hidden")
          img#popup-image(class="w-full h-full object-contain", style="border-radius: 0;")
        div(class="mt-4 text-center")
          p#popup-product-name(class="text-lg font-semibold mb-2")
          p#popup-product-description(class="text-sm text-gray-700")
          p#popup-product-price(class="text-sm font-bold text-customBlue mt-2")

          div(class="mt-4 flex flex-col items-center")
            label(for="quantity" class="text-sm font-semibold.mb-2") Cantidad:
            input#quantity(type="number" min="1" class="w-16 text-center border rounded focus:outline-none focus:ring focus:border-blue-300" onchange="updatePopupTotal()" value=(cartItem && cartItem.quantity ? cartItem.quantity : 1))
            p#popup-total(class="text-sm font-bold text-customColor mt-2")

          div.flex.justify-between.mt-4
            button#add-to-cart-btn(class="bg-customBlue16 text-white p-2 m-2 rounded" onclick="saveAndClosePopup()") Guardar
            button#buy-now-btn-popup(class="bg-customBlue17 text-white p-2 m-2 rounded" onclick="closePopup()") Cancelar

  ul#product-list(class="mb-8")
    each cartItem in shoppingCartItems
      li(class="mb-4")
        div.p-4.text-center
          div.product-container.bg-customBulue14(class="flex justify-between items-center h-full p-4 rounded" id=`${cartItem.Product ? cartItem.Product.productName : 'Unknown'}-container`)
            div.left-container(class="flex items-center")
              img(
                src=`${cartItem.Product ? cartItem.Product.productImage.toLowerCase() : 'unknown'}`,
                alt=cartItem.Product ? cartItem.Product.productName : 'Unknown',
                class="h-32 w-32 object-contain rounded-full product-image mb-2 mr-4",
              )
              div(class="flex flex-col items-start text-left")
                p.text-sm.font-semibold.mt-auto.mb-2.text-center #{cartItem.Product ? cartItem.Product.productName : 'Unknown'}
                p.text-sm.font-bold.text-green-500.mb-2 Precio: $${cartItem.Product ? cartItem.Product.price : 'Unknown'}
                p#quantityId(class="text-sm font-semibold.mb-2")= 'Cantidad: ' + (cartItem.quantity || 'Unknown')
                p#subtotalId(class="text-sm font-semibold.mb-2")= 'Subtotal: $' + (parseFloat(cartItem.Product ? cartItem.Product.price.replace('$', '') : 0) * (cartItem.quantity || 0)).toFixed(2) || 'Unknown'
            div.right-container(class="flex items-center")
              button(class="bg-blue-500 text-white p-2 m-2 rounded" onclick=`openPopup('${cartItem.Product ? cartItem.Product.id : 'Unknown'}')`) Editar
              button(class="bg-red-500 text-white p-2 m-2 rounded" onclick=`deleteProduct('${cartItem.Product ? cartItem.Product.id : 'Unknown'}')`) Eliminar

  script.
    const shoppingCartItems = !{JSON.stringify(shoppingCartItems)};
    
      async function showShoppingCart() {
        const productList = document.getElementById('product-list');
        productList.innerHTML = '';

        shoppingCartItems.forEach(cartItem => {
          const listItem = document.createElement('li');
          listItem.className = 'mb-4';
          listItem.innerHTML = `
            <div class="p-4 text-center">
              <div class="bg-customBlue15 product-container mb-2 flex justify-between items-center h-full p-4 rounded" id="${cartItem.Product ? cartItem.Product.productName : 'Unknown'}-container">
              <div class="left-container flex items-center">
                <img src="${cartItem.Product ? cartItem.Product.productImage.toLowerCase() : 'unknown'}" alt="${cartItem.Product ? cartItem.Product.productName : 'Unknown'}" class="h-32 w-32 object-contain rounded-full product-image mb-2 mr-4">
                <div class="flex flex-col items-start text-left"> 
                  <p class="text-sm font-semibold mt-auto mb-2 text-center">${cartItem.Product ? cartItem.Product.productName : 'Unknown'}</p>
                  <p class="text-sm font-bold text-customColor mb-2">Precio: $${cartItem.Product ? cartItem.Product.price : 'Unknown'}</p>
                  <p id="quantity-${cartItem.Product.id}" class="text-sm font-semibold mb-2">Cantidad: ${cartItem.quantity || 'Unknown'}</p>
                  <p id="subtotal-${cartItem.Product.id}" class="text-sm font-semibold mb-2">Subtotal: $${(parseFloat(cartItem.Product ? cartItem.Product.price.replace('$', '') : 0) * (cartItem.quantity || 0)).toFixed(2) || 'Unknown'}</p>
                </div>
              </div>
              <div class="right-container flex items-center"> 
                <button class="bg-customBlue16 text-white p-2 m-2 rounded" onclick="openPopup('${cartItem.Product ? cartItem.Product.id : 'Unknown'}')">Editar</button>
                <button class="bg-customBlue17 text-white p-2 m-2 rounded" onclick="deleteProduct('${cartItem.Product ? cartItem.Product.id : 'Unknown'}')">Eliminar</button>
              </div>
            </div>
          </div>
        `;

        productList.appendChild(listItem);
      });
      return Promise.resolve();
    }

    async function updatePopupQuantity(productId) {
      try {
        const response = await fetch(`/products/getQuantity/${productId}`);
        const data = await response.json();

        if (data.quantity !== undefined) {
          const quantityInput = document.getElementById('quantity');
          quantityInput.value = data.quantity || 1;
        }
      } catch (error) {
        console.error('Error al obtener la cantidad del producto:', error);
      }
    }

    async function openPopup(productId) {
      const product = shoppingCartItems.find(item => item.Product.id === parseInt(productId));

      if (product) {
        const popupContainer = document.getElementById('popup-container');
        const popupContent = document.getElementById('popup-content');
        const popupImage = document.getElementById('popup-image');
        const popupProductName = document.getElementById('popup-product-name');
        const popupProductDescription = document.getElementById('popup-product-description');
        const popupProductPrice = document.getElementById('popup-product-price');
        const quantityInput = document.getElementById('quantity');
        const saveButton = document.getElementById('add-to-cart-btn');

        await updatePopupQuantity(productId);

        popupImage.src = `${product.Product.productImage.toLowerCase()}`;
        popupImage.alt = product.Product.productName;
        popupProductName.textContent = product.Product.productName;
        popupProductDescription.textContent = product.Product.productDescription;
        popupProductPrice.textContent = `Precio: $${product.Product.price}`;

        saveButton.onclick = function () {
          saveAndClosePopup(productId);
        };

        updatePopupTotal();
        popupContainer.classList.remove('hidden');
      }
    }

    function closePopup() {
      const popupContainer = document.getElementById('popup-container');
      const saveButton = document.getElementById('add-to-cart-btn');
      const cancelButton = document.getElementById('buy-now-btn-popup');

      saveButton.onclick = function () {
        saveAndClosePopup();
      };
      cancelButton.onclick = closePopup;

      popupContainer.classList.add('hidden');
    }

    async function saveAndClosePopup(productId) {
      const popupContainer = document.getElementById('popup-container');
      const quantityInput = document.getElementById('quantity');
      const saveButton = document.getElementById('add-to-cart-btn');
      const updatedQuantity = parseInt(quantityInput.value) || 0;

      if (productId) {
        const cartItem = shoppingCartItems.find(item => item.Product.id === productId);

        if (cartItem) {
          await ShoppingCart.update(
            { quantity: parseInt(updatedQuantity) || 0 },
            { where: { ProductId: productId } }
          );

          const updatedCartItem = await ShoppingCart.findOne({
            where: { ProductId: productId },
            include: [{ model: Product }],
          });

          const index = shoppingCartItems.findIndex(item => item.Product.id === productId);
          if (index !== -1) {
            shoppingCartItems[index] = updatedCartItem ? updatedCartItem.dataValues : null;
          }

          const quantityElement = document.getElementById(`quantity-${productId}`);
          if (quantityElement) {
            quantityElement.textContent = `Cantidad: ${updatedQuantity}`;
          }

          const subtotalElement = document.getElementById(`subtotal-${productId}`);
          if (subtotalElement) {
            subtotalElement.textContent = `Subtotal: $${(parseFloat(updatedCartItem.Product.price.replace('$', '')) * updatedQuantity).toFixed(2) || 'Unknown'}`;
          }
        }
      }

      const response = await fetch(`/products/addToCart/${productId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: 1,
          productId: productId,
          quantity: updatedQuantity,
        }),
      });

      const result = await response.json();
      if (result.success && result.total !== undefined) {
        updateTotal();
        const totalPurchaseParagraph = document.getElementById('total-purchase');
        totalPurchaseParagraph.textContent = `Total de compra: $${result.total.toFixed(2)}`;
        console.log(totalPurchaseParagraph)
      }

      saveButton.onclick = saveAndClosePopup;
      
      updateTotal();
      closePopup();
      updateQuantityAndSubtotal(productId, updatedQuantity);
      showShoppingCart();
    }

    function updateQuantityAndSubtotal(productId, updatedQuantity) {
          const quantityElement = document.getElementById(`quantity-${productId}`);
          const subtotalElement = document.getElementById(`subtotal-${productId}`);

          const productPrice = parseFloat(document.getElementById('popup-product-price').textContent.replace('Precio: $', '')) || 0;
          const updatedSubtotal = (productPrice * updatedQuantity).toFixed(2);
          
          quantityElement.textContent = `Cantidad: ${updatedQuantity}`;
          subtotalElement.textContent = `Subtotal: $${updatedSubtotal}`;    
          
          const quantity = parseFloat(shoppingCartItems.find(item => item.Product.id === productId).Product.price.replace('$', '')) || 0;
        }

    function updatePopupTotal() {
      const quantityInput = document.getElementById('quantity');
      const popupTotalParagraph = document.getElementById('popup-total');
      const productPrice = parseFloat(document.getElementById('popup-product-price').textContent.replace('Precio: $', '')) || 0;
      const quantity = parseInt(quantityInput.value) || 0;
      const popupTotal = (productPrice * quantity).toFixed(2) || 'Unknown';
      popupTotalParagraph.textContent = `Subtotal: $${popupTotal}`;
    }

    async function updateTotal() {
      try {
        const response = await fetch("/products/calculateTotal", {
          method: "GET",
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          throw new Error("Error al obtener el total");
        }

        const result = await response.json();
        const totalPurchaseParagraph = document.getElementById('total-purchase');
        totalPurchaseParagraph.textContent = `Total de compra: $${result.total.toFixed(2)}`;
        console.log('Total actualizado:', result.total.toFixed(2));
      } catch (error) {
        console.error("Error al actualizar el total:", error);
        // Agregar manejo de errores si es necesario
      }
    }

    async function deleteProduct(productId) {
      try {
        const response = await fetch(`/products/deleteProduct/${productId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error(`Error al eliminar el producto con ID ${productId}`);
        }

        // Modificamos el formato del ID para que coincida con el del contenedor
        const formattedProductId = `Producto ${productId}-container`;
        console.log("Buscando contenedor con ID:", formattedProductId);
        const productContainer = document.getElementById(formattedProductId);

        if (productContainer) {
          console.log("Contenedor encontrado. Eliminando...");
          productContainer.remove();
          updateTotal();
          showShoppingCart();  // Mostrar el carrito actualizado
          window.location.reload();  // Recargar la página
        } else {
          console.warn(`No se encontró el contenedor del producto con ID ${formattedProductId}`);
        }
      } catch (error) {
        console.error("Error al eliminar el producto:", error);
        alert(`Error al eliminar el producto: ${error.message}`);
      }
    }


    async function buyNow() {
        try {
            const response = await fetch("/create-order", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                // No enviamos datos en el cuerpo
            });

            if (!response.ok) {
                const errorData = await response.json(); // Captura la respuesta del servidor
                console.error("Error en la respuesta del servidor:", errorData);
                throw new Error("Error al crear la orden");
            }

            const data = await response.json();
            // Redirigir al usuario a la URL de la pasarela de pago
            window.location.href = data.init_point;
        } catch (error) {
            console.error("Error al completar la compra:", error);
            // Agregar manejo de errores si es necesario
        }
    }